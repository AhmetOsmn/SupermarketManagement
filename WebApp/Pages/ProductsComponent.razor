@page "/products"

@inject IViewProductsUseCase ViewProductsUseCase
@inject IGetCategoryByIDUseCase GetCategoryByIDUseCase

<h3>Products</h3>

@if (products != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Product Category</th>
                <th>Price</th>
                <th>Quantity</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@GetCategoryByIDUseCase.Execute(product.CategoryID)?.Name</td>
                    <td>@(Math.Round(product.Price,2))</td>
                    <td>@product.Quantity</td>
                    <td><button type="button" @onclick="@(() => EditProduct(product))" class="btn btn-info">Edit</button></td>
                    <td><button type="button" @onclick="@(() => DeleteProduct(product.ProductID))" class="btn btn-warning">Delete</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<Product> products;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        products = ViewProductsUseCase.Execute();
    }

    private void EditProduct(Product product)
    {

    }

    private void DeleteProduct(int productID)
    {
        
    }
}
