@page "/products"

@inject NavigationManager NavigationManager
@inject IViewProductsUseCase ViewProductsUseCase
@inject IDeleteProductUseCase DeleteProductUseCase
@inject IGetCategoryByIDUseCase GetCategoryByIDUseCase

<h3>Products</h3>

@if (products != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Product Category</th>
                <th>Price</th>
                <th>Quantity</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@GetCategoryByIDUseCase.Execute(product.CategoryID.Value)?.Name</td>
                    <td>@(Math.Round(product.Price.Value,2))</td>
                    <td>@product.Quantity</td>
                    <td><button type="button" @onclick="@(() => OnEditProduct(product))" class="btn btn-info">Edit</button></td>
                    <td><button type="button" @onclick="@(() => OnDeleteProduct(product.ProductID))" class="btn btn-warning">Delete</button></td>
                </tr>
            }
        </tbody>
    </table>
}
<br />
<button type="button" @onclick="OnClickAddProduct" class="btn btn-primary">Add Product</button>

@code {
    private IEnumerable<Product> products;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        products = ViewProductsUseCase.Execute();
    }

    private void OnEditProduct(Product product)
    {
        NavigationManager.NavigateTo($"/editproduct/{product.ProductID}");
    }

    private void OnDeleteProduct(int productID)
    {
        DeleteProductUseCase.Execute(productID);
    }

    private void OnClickAddProduct()
    {
        NavigationManager.NavigateTo("/addproduct");
    }
}
